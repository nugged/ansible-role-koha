- name: Set server timezone to {{ koha_server_timezone }}
  timezone:
    name: "{{ koha_server_timezone }}"

- name: Check to have {{ koha_domain }} domain in /etc/hosts
  become: yes
  lineinfile:
    path: /etc/hosts
    line: "127.0.1.1 {{ koha_domain }}"
    insertafter: '127\.0\.0\.1 localhost'
    state: present



- name: Add primary repository signing key
  apt_key:
    keyserver: "{{ koha_keyserver }}"
    id: "{{ koha_signing_key_id }}"
  when: koha_signing_key_id is defined and koha_signing_key_id|length > 0

- name: Add primary repository signing key by content
  apt_key:
    data: "{{ koha_signing_key_content }}"
  when: koha_signing_key_content is defined and koha_signing_key_content|length > 0

- name: Add primary repository
  apt_repository:
    repo: "{{ koha_package_repository }}"
    state: present
    filename: koha-primary

- name: Add secondary package repository signing key
  apt_key:
    keyserver: "{{ koha_secondary_keyserver }}"
    id: "{{ koha_secondary_signing_key_id }}"
  when: 
   - koha_secondary_signing_key_id is defined and koha_secondary_signing_key_id|length > 0
   - koha_secondary_keyserver is defined and koha_secondary_keyserver|length > 0

- name: Add secondary repository signing key by content
  apt_key:
    data: "{{ koha_secondary_signing_key_content }}"
  when: koha_secondary_signing_key_content is defined and koha_secondary_signing_key_content|length > 0

- name: Add secondary repository
  apt_repository:
    repo: "{{ koha_secondary_package_repository }}"
    state: present
    filename: koha-secondary

- name: Configure pinning for koha-common
  template:
    src: pin-koha.j2
    dest: /etc/apt/preferences.d/koha
    owner: root
    group: root
    mode: u=rw,g=r
  when: koha_secondary_package_rep_domain is defined and koha_secondary_package_rep_domain|length > 0

- name: Override Koha hourly crons
  template:
    src: koha-common-hourly.j2
    dest: /etc/cron.hourly/koha-common
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  when: koha_override_hourly_crons | bool

- name: Override Koha daily crons
  template:
    src: koha-common-daily.j2
    dest: /etc/cron.daily/koha-common
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  when: koha_override_daily_crons | bool

- name: Override Koha monthly crons
  template:
    src: koha-common-monthly.j2
    dest: /etc/cron.monthly/koha-common
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  when: koha_override_monthly_crons | bool

- name: Override /etc/cron.d/koha-common crons
  template:
    src: koha-common-crons.j2
    dest: /etc/cron.d/koha-common
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  when: koha_override_koha_crons | bool

- name: Install Koha packages
  package:
    name: "{{ item }}"
    state: present
  loop:
    - koha-common
    - koha-elasticsearch

- name: Install mariadb-backup package
  package:
    name: mariadb-backup
    state: present
  when: mysql_enable_backups is defined and mysql_enable_backups



- name: Enable required Apache modules
  apache2_module:
    name: "{{ item }}"
    state: present
  loop:
    - rewrite
    - cgi
    - headers
    - proxy_http
    - ssl
  register: apache_modules



- name: Assign 'koha user exists' test variable
  set_fact: koha_user_exists_error_message="User {{ koha_instance_name }}-koha already exists"
  when: koha_create_instance | bool

- name: Create Koha instance
  command: koha-create {{ koha_instance_name }} --use-db --database {{ koha_db_database }}
  register: koha_create_result
  failed_when:
    - koha_create_result.rc != 0
    - 'koha_user_exists_error_message not in koha_create_result.stderr'
  changed_when: "koha_user_exists_error_message not in koha_create_result.stderr"
  when: koha_create_instance | bool

- name: Configure Elasticsearch index mappings
  template:
    src: mappings.yaml.j2
    dest: /etc/koha/sites/{{ koha_instance_name }}/mappings.yaml
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r
  when: koha_custom_index_mappings

- name: Configure Elasticsearch index config
  template:
    src: index_config.yaml.j2
    dest: /etc/koha/sites/{{ koha_instance_name }}/index_config.yaml
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r
  when: koha_custom_index_config

- name: Configure Elasticsearch field config
  template:
    src: field_config.yaml.j2
    dest: /etc/koha/sites/{{ koha_instance_name }}/field_config.yaml
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r
  when: koha_custom_field_config

- name: Create z3950 directory
  file: path=/etc/koha/sites/{{ koha_instance_name }}/z3950 state=directory mode=0755

- name: Configure Z39.50 pqf properties settings
  template:
    src: pqf.properties.j2
    dest: /etc/koha/sites/{{ koha_instance_name }}/z3950/pqf.properties
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r,o=r
  when: koha_custom_z3950_pqf_properties

- name: Configure Z39.50 attribute mappings settings
  template:
    src: attribute_mappings.yaml.j2
    dest: /etc/koha/sites/{{ koha_instance_name }}/z3950/attribute_mappings.yaml
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r,o=r
  when: koha_custom_z3950_attributes

- name: Configure Z39.50 settings
  template:
    src: z3950_config.xml.j2
    dest: /etc/koha/sites/{{ koha_instance_name }}/z3950/config.xml
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r,o=r
  when: koha_custom_z3950_config | bool

- name: Allow reading log4perl.conf for everybody (Z39.50 needs it)
  file:
    path: /etc/koha/sites/{{ koha_instance_name }}/log4perl.conf
    mode: u=rw,g=r,o=r

- name: Configure OAI-PMH settings
  template:
    src: oai.conf.j2
    dest: /etc/koha/sites/{{ koha_instance_name }}/oai.conf
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r
  when: koha_custom_oai_pmh

- name: Configure koha-conf.xml
  template:
    src: koha-conf.xml.j2
    dest: /etc/koha/sites/{{ koha_instance_name }}/koha-conf.xml
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r
  register: koha_conf

- name: Enable Plack
  command: koha-plack --enable {{ koha_instance_name }}
  register: koha_plack_result
  failed_when:
    - koha_plack_result.rc != 0
    - '"Plack already enabled for" not in koha_plack_result.stderr'
  changed_when: '"Plack already enabled for" not in koha_plack_result.stderr'



- name: Configure apache2
  template:
    src: apache-conf.j2
    dest: /etc/apache2/sites-enabled/{{ koha_instance_name }}.conf
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r
  register: apache_conf

- name: Configure apache2 ports
  template:
    src: apache-ports.conf.j2
    dest: /etc/apache2/ports.conf
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  register: apache_ports_conf

- name: Configure SIPconfig.xml
  template:
    src: SIPconfig.xml.j2
    dest: /etc/koha/sites/{{ koha_instance_name }}/SIPconfig.xml
    owner: root
    group: "{{ koha_instance_name }}-koha"
    mode: u=rw,g=r
  register: koha_sip_conf
  when: koha_sip_enable

- name: Enable SIP server
  command: koha-enable-sip {{ koha_instance_name }}
  register: koha_sip_result
  changed_when: '"SIP server already enabled" not in koha_sip_result.stdout'
  when: koha_sip_enable



- name: Restart koha-common
  systemd:
    state: restarted
    name: koha-common
  when: koha_conf.changed or koha_sip_conf.changed or koha_sip_result.changed

- name: Restart memcached
  systemd:
    state: restarted
    name: memcached
  when: koha_conf.changed

- name: Restart Apache
  systemd:
    name: apache2
    state: restarted
  when: apache_modules.changed or koha_plack_result.changed

- name: Reload Apache
  systemd:
    name: apache2
    state: reloaded
  when: apache_conf.changed or apache_ports_conf.changed



- name: Check for installed translations
  command: "koha-translate --list"
  environment:
    MEMCACHED_SERVERS: '127.0.0.1:11211'
    MEMCACHED_NAMESPACE: '{{ koha_memcached_ns_prefix }}{{ koha_instance_name }}'
  register: koha_installed_languages
  failed_when: koha_installed_languages.stderr != ''
  changed_when: False

- name: Install translations
  with_items: "{{ koha_languages }}"
  command: "koha-translate --install {{ item }}"
  environment:
    MEMCACHED_SERVERS: '127.0.0.1:11211'
    MEMCACHED_NAMESPACE: '{{ koha_memcached_ns_prefix }}{{ koha_instance_name }}'
  register: koha_languages_install
  failed_when: koha_languages_install.stderr != ''
  when: koha_installed_languages is defined and koha_installed_languages.stdout is defined and item not in koha_installed_languages.stdout
